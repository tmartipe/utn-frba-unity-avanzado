//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/EnemyAnimations.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EnemyInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EnemyInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EnemyAnimations"",
    ""maps"": [
        {
            ""name"": ""Animations"",
            ""id"": ""01ce229c-9ce7-46b4-8b38-f486d2405d97"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""56c1b6c5-1247-47fd-90a1-d1b7da2e52b9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f895d450-ae6e-496f-aebf-4d613fd291b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd5b6ed4-9074-4808-a70e-45812417eee6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0401b5db-17ba-46d1-9e53-d1ccd6f88216"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Animations
        m_Animations = asset.FindActionMap("Animations", throwIfNotFound: true);
        m_Animations_Run = m_Animations.FindAction("Run", throwIfNotFound: true);
        m_Animations_Shoot = m_Animations.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Animations
    private readonly InputActionMap m_Animations;
    private List<IAnimationsActions> m_AnimationsActionsCallbackInterfaces = new List<IAnimationsActions>();
    private readonly InputAction m_Animations_Run;
    private readonly InputAction m_Animations_Shoot;
    public struct AnimationsActions
    {
        private @EnemyInputActions m_Wrapper;
        public AnimationsActions(@EnemyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Run => m_Wrapper.m_Animations_Run;
        public InputAction @Shoot => m_Wrapper.m_Animations_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Animations; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnimationsActions set) { return set.Get(); }
        public void AddCallbacks(IAnimationsActions instance)
        {
            if (instance == null || m_Wrapper.m_AnimationsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AnimationsActionsCallbackInterfaces.Add(instance);
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IAnimationsActions instance)
        {
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IAnimationsActions instance)
        {
            if (m_Wrapper.m_AnimationsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAnimationsActions instance)
        {
            foreach (var item in m_Wrapper.m_AnimationsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AnimationsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AnimationsActions @Animations => new AnimationsActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IAnimationsActions
    {
        void OnRun(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
